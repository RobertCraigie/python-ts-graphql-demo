import { Field, notEmptyString, useField, useForm } from "@shopify/react-form";
import type { NextPage } from "next";
import Head from "next/head";
import {
  useAddLocationMutation,
  useAddTaskMutation,
  useGetTasksQuery,
} from "../graphql";

const Input: React.FC<{ field: Field<string>; placeholder?: string }> = ({
  field,
  placeholder,
}) => (
  <>
    <input
      className={`w-full rounded-xl bg-slate-100 p-3 text-xl ${
        field.error && "bg-pink-200 text-pink-700 placeholder-pink-300"
      }`}
      placeholder={placeholder}
      value={field.value}
      onChange={field.onChange}
    />
    {field.error && (
      <div className="text-sm mt-2 text-red-500 inset-x-0">{field.error}</div>
    )}
  </>
);

const Tasks: React.FC = () => {
  const [{ data, fetching }] = useGetTasksQuery();
  if (fetching) return <div>Loading</div>;
  return (
    <div className="">
      {data?.tasks.map(({ name, location }, index) => (
        <div key={index} className="">
          {name} {location && `at ${location.name}`}
        </div>
      ))}
    </div>
  );
};

const AddLocation: React.FC = () => {
  const [{ fetching, error, data }, mutation] = useAddLocationMutation();

  const {
    fields: { name },
    submit,
  } = useForm({
    fields: {
      name: useField({
        value: "",
        validates: notEmptyString("This field is required"),
      }),
    },
    makeCleanAfterSubmit: true,
    onSubmit: async ({ name }) => {
      const { data } = await mutation({ name });
      if (data?.addLocation.__typename === "LocationExists")
        return {
          status: "fail",
          errors: [{ message: "Location already exists", field: ["name"] }],
        };
      return { status: "success" };
    },
  });

  return (
    <form onSubmit={submit} className="py-4">
      <Input field={name} placeholder="New location name" />
    </form>
  );
};

const AddTask: React.FC = () => {
  const [, mutation] = useAddTaskMutation();

  const {
    fields: { name, locationName },
    submit,
  } = useForm({
    fields: {
      name: useField({
        value: "",
        validates: notEmptyString("This field is required"),
      }),
      locationName: useField({
        value: "",
        validates: notEmptyString("This field is required"),
      }),
    },
    makeCleanAfterSubmit: true,
    onSubmit: async ({ name, locationName }) => {
      const { data } = await mutation({ name, locationName });
      if (data?.addTask.__typename === "LocationNotFound")
        return {
          status: "fail",
          errors: [
            { message: "This location does not exist", field: ["name"] },
          ],
        };
      return { status: "success" };
    },
  });

  return (
    <form onSubmit={submit} className="py-4 flex space-x-2">
      <div className="flex-grow">
        <Input field={name} placeholder="New task" />
      </div>
      <div className="">
        <Input field={locationName} placeholder="Location" />
      </div>
    </form>
  );
};

const Home: NextPage = () => {
  return (
    <div className="">
      <Head>
        <title>Mini Inch</title>
        <meta
          name="description"
          content="Generated by the Inch team for teaching purposes"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="max-w-2xl mx-auto p-4 min-h-screen flex flex-col justify-center">
        <h1 className="text-7xl leading-loose text-center font-extrabold">
          Mini Inch
        </h1>
        <Tasks />
        <AddLocation />
        <AddTask />
      </main>
    </div>
  );
};

export default Home;
